}
testMersenneTwister4(100)
testStandardMinimal5(100)
testRANDU3(100)
testStandardMinimal3(100)
testSobol4 <- function(n,p=1)
{
u <- Sobol(n, p)
return (order.test(u[,1], d=4, echo=FALSE)$p.value)
}
testSobol4(100)
testSobol4 <- function(n,p=1)
{
u <- Sobol(n, p)
return (order.test(u, d=4, echo=FALSE)$p.value)
}
testSobol4(100)
testSobol4(100)
testSobol4(1000)
testSobol4(10000)
testSobol4(1000)
testRANDU5(100)
testStandardMinimal5(100)
testMersenneTwister4(100)
testSobol4(1000)
RNGkind()
set.seed(215,kind=’Mersenne-Twister’)
set.seed(215,kind="Mersenne-Twister")
RNGkind()
LoiUniforme <- function(p)
{
k <- 0
somme <- 0
while(runif(1) > somme)
{
k <- k + 1
somme <- somme + p
}
return (k)
}
LoiUniforme(0.2)
LoiUniforme(0.2)
LoiUniforme(0.2)
LoiUniforme(0.2)
LoiUniforme(0.2)
LoiUniforme(0.2)
LoiUniforme(0.2)
LoiUniforme(0.2)
LoiUniforme(0.2)
LoiUniforme(0.2)
LoiUniforme(0.2)
LoiUniforme(0.2)
LoiUniforme(0.2)
LoiUniforme(0.2)
LoiUniforme(0.2)
LoiUniforme(0.2)
LoiUniforme(0.2)
LoiUniforme(0.2)
LoiUniforme(0.2)
LoiUniforme(0.2)
LoiUniforme(0.2)
LoiUniforme(0.2)
LoiUniforme(0.2)
LoiUniforme(0.2)
LoiUniforme(0.2)
LoiUniforme(0.2)
LoiUniforme(0.2)
LoiUniforme(0.2)
LoiUniforme(0.2)
LoiUniforme(0.2)
LoiUniforme(0.2)
LoiUniforme(0.5)
LoiUniforme(0.5)
LoiUniforme(0.5)
LoiUniforme(0.5)
LoiUniforme(0.5)
LoiUniforme(0.5)
LoiUniforme(0.5)
LoiUniforme(0.5)
LoiUniforme(0.5)
LoiBinomiale <- function(n,p)
{
set.seed(215,kind="Mersenne-Twister")
vec = rep(0, n)
for (i in 1:n)
{
vec[i] = LoiUniforme(p)
}
plot(table(vec))
}
LoiBinomiale(100, 0.5)
LoiBinomiale(100, 0.1)
LoiBinomiale(1000, 0.1)
LoiBinomiale <- function(n,p)
{
set.seed(215,kind="Mersenne-Twister")
vec = rep(0, n)
for (i in 1:n)
{
vec[i] = LoiUniforme(p)-1
}
plot(table(vec))
}
LoiBinomiale(1000, 0.1)
LoiBinomiale <- function(n,p)
{
set.seed(215,kind="Mersenne-Twister")
vec = rep(0, n)
for (i in 1:n)
{
vec[i] = LoiUniforme(p)
}
plot(table(vec))
}
LoiBinomiale(1000, 0.1)
LoiBinomiale(1000, 0.01)
LoiBinomiale(100000, 0.01)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1,2)
runif(2,2)
runif(2,0.2)
runif(10,0.2)
runif(10,0.001)
runif(10,0.999)
runif(10,0)
runif(10,0.5)
runif(10,0.5)
LoiBinomiale <- function(n,p)
{
#set.seed(215,kind="Mersenne-Twister")
vec = rep(0, n)
for (i in 1:n)
{
vec[i] = LoiUniforme(p)
}
plot(table(vec))
}
LoiBinomiale(100000, 0.01)
LoiBinomiale(1000, 0.1)
LoiBinomiale(100000, 0.1)
LoiBinomiale(1000, 0.05)
LoiBinomiale(10000, 0.05)
LoiBinomiale <- function(n,p)
{
#set.seed(215,kind="Mersenne-Twister")
vec = rep(0, n)
for (i in 1:1000)
{
a <- LoiUniforme(p)
vec[a] = vec[a]+1
}
plot(table(vec))
}
LoiBinomiale(10, 0.05)
LoiBinomiale <- function(n,p)
{
#set.seed(215,kind="Mersenne-Twister")
vec = rep(0, n)
for (i in 1:1000)
{
a <- LoiUniforme(p)
vec[a] <- vec[a]+1
}
plot(table(vec))
}
LoiBinomiale(10, 0.05)
LoiBinomiale <- function(n,p)
{
#set.seed(215,kind="Mersenne-Twister")
vec = rep(0, n)
for (i in 1:1000)
{
a <- LoiUniforme(p)
vec[a] <- vec[a]+1
}
plot(vec)
}
LoiBinomiale(10, 0.05)
LoiBinomiale <- function(n,p)
{
#set.seed(215,kind="Mersenne-Twister")
vec = rep(0, n)
for (i in 1:10000)
{
a <- LoiUniforme(p)
vec[a] <- vec[a]+1
}
plot(vec)
}
LoiBinomiale(10, 0.05)
LoiBinomiale <- function(n,p)
{
#set.seed(215,kind="Mersenne-Twister")
vec = rep(0, n)
for (i in 1:n)
{
vec[i] = LoiUniforme(p)
}
plot(table(vec))
}
LoiBinomiale(10, 0.05)
LoiBinomiale <- function(n,p)
{
#set.seed(215,kind="Mersenne-Twister")
vec = rep(0, n)
for (i in 1:1000)
{
a <- LoiUniforme(p)
vec[a] <- vec[a] + 1
}
table(vec)
#plot(table(vec))
}
LoiBinomiale(10, 0.05)
LoiBinomiale <- function(n,p)
{
#set.seed(215,kind="Mersenne-Twister")
vec = rep(0, 1000)
for (i in 1:1000)
{
vec[i] <- LoiUniforme(p)
}
table(vec)
#plot(table(vec))
}
LoiBinomiale(10, 0.05)
LoiBinomiale <- function(n,p)
{
#set.seed(215,kind="Mersenne-Twister")
vec = rep(0, n)
for (i in 1:n)
{
vec[i] <- LoiUniforme(p)
}
table(vec)
#plot(table(vec))
}
LoiBinomiale(10, 0.05)
LoiBinomiale(10, 0.05)
LoiBinomiale(10, 0.05)
LoiBinomiale(10, 0.05)
LoiBinomiale(10, 0.05)
LoiBinomiale <- function(n,p)
{
#set.seed(215,kind="Mersenne-Twister")
vec = rep(0, n)
for (i in 1:n)
{
vec[i] <- LoiUniforme(p)
}
cat(vec)
#plot(table(vec))
}
LoiBinomiale(10, 0.05)
LoiBinomiale(10, 0.05)
LoiBinomiale <- function(n,p)
{
#set.seed(215,kind="Mersenne-Twister")
vec = rep(0, 1000)
for (i in 1:1000)
{
vec[i] = LoiUniforme(p)
}
plot(table(vec))
}
LoiBinomiale(10, 0.05)
LoiBinomiale(10, 0.05)
LoiBinomiale(100, 0.05)
LoiBinomiale(1000, 0.05)
LoiBinomiale(10000, 0.05)
LoiUniforme(0.5)
LoiUniforme(0.5)
LoiUniforme(0.5)
LoiUniforme(0.5)
LoiUniforme(0.5)
LoiUniforme(0.5)
LoiUniforme(0.5)
LoiUniforme(0.5)
LoiUniforme(0.5)
LoiUniforme(0.5)
LoiUniforme(0.5)
LoiUniforme(0.5)
LoiUniforme(0.5)
LoiUniforme(0.5)
LoiUniforme(0.5)
LoiUniforme(0.5)
LoiUniforme(0.5)
LoiUniforme(0.5)
LoiUniforme(0.5)
LoiUniforme(0.5)
LoiUniforme(0.5)
LoiUniforme(0.5)
LoiUniforme(0.5)
LoiUniforme(0.5)
LoiUniforme(0.5)
LoiUniforme(0.5)
LoiBinomiale <- function(n,p)
{
#set.seed(215,kind="Mersenne-Twister")
succes <- 0
for (i in 1:n)
{
if (runif(1) <= p)
{
succes <- succes + 1
}
}
return (succes)
}
LoiBinomiale(10000, 0.05)
PlotBinomiale(n,p)
{
vec = rep(0,1000)
for (i in 1:1000)
{
vec[i] <- LoiBinomiale(n,p)
}
plot(table(vec))
}
PlotBinomiale <- function(n,p)
{
vec = rep(0,1000)
for (i in 1:1000)
{
vec[i] <- LoiBinomiale(n,p)
}
plot(table(vec))
}
PlotBinomiale(100, 0.05)
PlotBinomiale(100, 0.5)
PlotBinomiale(10, 0.5)
PlotBinomiale <- function(n,p,precision=1000)
{
vec = rep(0,precision)
for (i in 1:precision)
{
vec[i] <- LoiBinomiale(n,p)
}
plot(table(vec))
}
PlotBinomiale(10, 0.5, 10000)
PlotBinomiale(20, 0.5, 10000)
PlotBinomiale(20, 0.7, 10000)
PlotBinomiale(20, 0.4, 10000)
PlotBinomiale(20, 0.01, 10000)
PlotBinomiale(20, 0.5, 10000)
LoiNormale(m,s)
{
X <- sqrt(-ln(runif(1)))*cos(2*pi*runif(1))
X <- m + s*X
return (X)
}
log(1)
log(10)
LoiNormale(m,s)
{
X <- sqrt(-log(runif(1)))*cos(2*pi*runif(1))
X <- m + s*X
return (X)
}
LoiNormale <- function(m,s)
{
X <- sqrt(-log(runif(1)))*cos(2*pi*runif(1))
X <- m + s*X
return (X)
}
LoiNormale(0,1)
LoiNormale(0,1)
LoiNormale(0,1)
LoiNormale(0,1)
LoiNormale(0,1)
PlotNormale <- function(m,s,precision=1000)
{
vec = rep(0,precision)
for (i in 1:precision)
{
vec[i] <- LoiNormale(m,s)
}
plot(table(vec))
}
LoiNormale(0,1)
PlotNormale(0,1)
PlotNormale(0,1,10)
PlotNormale(0,1,100)
PlotNormale <- function(m,s,precision=1000)
{
vec = rep(0,precision)
for (i in 1:precision)
{
vec[i] <- LoiNormale(m,s)
}
hist(vec)
}
PlotNormale(0,1,100)
PlotNormale(0,1)
PlotNormale(0,1, 10000)
PlotNormale(15,1, 10000)
PlotNormale(15,10, 10000)
PlotNormale(0,1, 10000)
PlotNormale(0,1, 10000)
LoiNormale <- function(m,s)
{
X <- sqrt(-log(runif(1)))*cos(2*pi*runif(1))
X <- m + sqrt(s)*X
return (X)
}
PlotNormale(0,1, 10000)
PlotNormale(15,1, 10000)
Inversion <- function()
{
return (exp(sqrt(runif(1)*log(2)))-1)
}
plotInversion()
{
vec = rep(0,1000)
for (i in 1:1000)
{
vec[i] <- Inversion()
}
hist(vec)
}
plotInversion <- function()
{
vec = rep(0,1000)
for (i in 1:1000)
{
vec[i] <- Inversion()
}
hist(vec)
}
plotInversion()
plotInversion <- function()
{
vec = rep(0,10000)
for (i in 1:10000)
{
vec[i] <- Inversion()
}
hist(vec)
}
plotInversion()
plotInversion()
plotInversion()
plotInversion()
plotInversion()
plotInversion()
plotInversion()
plotInversion()
plotInversion()
plotInversion()
Rejet <- function()
{
c <- 2/(log(2)*log(2))
y <- runif(1)
x <- runif(1)
while(x <= (log(1+y)/(1+y))/c)
{
x <- runif(1)
y <- runif(1)
}
x <- y
return (x)
}
Rejet()
Rejet()
Rejet()
Rejet()
Rejet()
Rejet()
Rejet()
Rejet()
Rejet()
Rejet()
Rejet()
Rejet()
Rejet()
plotRejet <- function()
{
vec = rep(0,10000)
for (i in 1:10000)
{
vec[i] <- Rejet()
}
hist(vec)
}
plotRejet()
plotRejet <- function()
{
vec = rep(0,1000)
for (i in 1:1000)
{
vec[i] <- Rejet()
}
hist(vec)
}
plotRejet()
